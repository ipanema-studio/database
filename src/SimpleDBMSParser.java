/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParser.java */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;

import java.io.File;
import java.io.UnsupportedEncodingException;

import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;

import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

public class SimpleDBMSParser implements SimpleDBMSParserConstants {
  public static Environment myDbEnvironment = null;
  public static Database myDatabase = null;
  public static EnvironmentConfig envConfig = new EnvironmentConfig();
  public static DatabaseConfig dbConfig = new DatabaseConfig();

  public static final int PRINT_SYNTAX_ERROR = 0;               //constants indicating valid queries
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_SELECT = 4;
  public static final int PRINT_INSERT = 5;
  public static final int PRINT_DELETE = 6;
  public static final int PRINT_SHOW_TABLES = 7;

  public static final String[] COMP_OPERATOR = { "<", ">", "=", "<=", ">=", "!=", "is" };
  public static final String[] OPERATOR = { "<", ">", "=", "<=", ">=", "!=", "is", "not", "and", "or", "(", ")" };

  public static void main(String args[]) throws ParseException
  {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print("DB_2015-16535> ");                //prompt

        envConfig.setAllowCreate(true);
    myDbEnvironment = new Environment(new File("db/"), envConfig);
    dbConfig.setAllowCreate(true);
    dbConfig.setSortedDuplicates(true);
    myDatabase = myDbEnvironment.openDatabase(null, "sampleDatabase", dbConfig);

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR);
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q)                //note: the program will use PRINT_SYNTAX_ERROR part only. other print messages will be printed in functions.
  {
    switch(q)
    {
      case PRINT_SYNTAX_ERROR:
        System.out.println("Syntax error");
        break;
      case PRINT_CREATE_TABLE:
        System.out.println("\u005c'CREATE TABLE\u005c' requested");
        break;
      case PRINT_DROP_TABLE:
        System.out.println("\u005c'DROP TABLE\u005c' requested");
        break;
      case PRINT_DESC:
        System.out.println("\u005c'DESC\u005c' requested");
        break;
      case PRINT_SELECT:
        System.out.println("\u005c'SELECT\u005c' requested");
        break;
      case PRINT_INSERT:
        System.out.println("\u005c'INSERT\u005c' requested");
        break;
      case PRINT_DELETE:
        System.out.println("\u005c'DELETE\u005c' requested");
        break;
      case PRINT_SHOW_TABLES:
        System.out.println("\u005c'SHOW TABLES\u005c' requested");
        break;
    }
    System.out.print("DB_2015-16535> ");
  }

  public static void dbClose() {                        //function for closing database when the program is terminated.
    if (myDatabase != null) myDatabase.close();
    if (myDbEnvironment != null) myDbEnvironment.close();
  }

  public static void dbPut(String keyString, String dataString) {                       //function for saving new key-value pair.
    Cursor cursor = null;
    DatabaseEntry key;
    DatabaseEntry data;

    try {
      cursor = myDatabase.openCursor(null, null);
      key = new DatabaseEntry(keyString.getBytes("UTF-8"));
      data = new DatabaseEntry(dataString.getBytes("UTF-8"));
      cursor.put(key, data);
      cursor.close();
    }
    catch (DatabaseException de) {
      cursor.close();
    }
    catch (UnsupportedEncodingException e) {
      cursor.close();
      e.printStackTrace();
    }
  }

  public static String dbGet(String query) {            //function for finding value.
    Cursor cursor = myDatabase.openCursor(null, null);
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();

    if (cursor.getFirst(foundKey, foundData, LockMode.DEFAULT) != OperationStatus.SUCCESS) {    //if database is empty,
      cursor.close();
      return null;                                                                                                                                                              //return null.
    }

        try {
            do {
              String keyString = new String(foundKey.getData(), "UTF-8");
              String dataString = new String(foundData.getData(), "UTF-8");

              if (keyString.equals(query)) {            //if query is found,
                        cursor.close();
                return dataString;                                      //return the value.
              }
            }
            while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
        }
        catch (UnsupportedEncodingException e) {
          cursor.close();
          e.printStackTrace();
        }

        cursor.close();                 //if nothing,
    return null;                        //return null.
  }

  public static void dbDelete(String query) {           //function for deleting key-value pair.
    Cursor cursor = myDatabase.openCursor(null, null);
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();

    if (cursor.getFirst(foundKey, foundData, LockMode.DEFAULT) != OperationStatus.SUCCESS) {    //if database is empty just return.
      cursor.close();
      return;
    }

        try {
            do {
              String keyString = new String(foundKey.getData(), "UTF-8");
              String dataString = new String(foundData.getData(), "UTF-8");

              if (keyString.equals(query)) {            //if query is found,
                cursor.delete();                                        //delete.
                        cursor.close();
                return;
              }
            }
            while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
        }
        catch (UnsupportedEncodingException e) {
          cursor.close();
          e.printStackTrace();
        }

        cursor.close();
    return;
  }

  public static void dbUpdate(String keyString, String dataString) {
    dbDelete(keyString);
    dbPut(keyString, dataString);
  }

  public static void createTableHandler(String query)           //function for "create table" query. argument form is explained in document.
  {
        String tableName = "_";                                                                 //these are the elements for creating new table.
        ArrayList<String> attributeList = new ArrayList<String>();
        HashMap<String, String> attributeMetaData = new HashMap<String, String>();

        ArrayList<String> referenceTableAttributeList = new ArrayList<String>();        //these are the elements for updating referenced table.
        HashMap<String, String> referenceTableAttributeMetaData = new HashMap<String, String>();

        int primaryKeyDefCount = 0;
    String[] querySlice = query.split("/");

    for (int i = 0; i != querySlice.length; i++) {
          if (i == 0) {
                tableName = querySlice[0];
                if (dbGet(tableName) != null) {         //if table name already exists, return.
                  System.out.println("Create table has failed: table with the same name already exists");
                  return;
                }
          }
          else {
                String[] tableElement = querySlice[i].split(",");
                if (!tableElement[0].equals("primary") && !tableElement[0].equals("foreign")) {         //column definition.
                  if (attributeList.contains(tableElement[0])) {                                                                        //if column name is already used, return.
                        System.out.println("Create table has failed: column definition is duplicated");
                        return;
                  }
                  else {
                        attributeList.add(tableElement[0]);
                        String temp = tableElement[1];
                        if (!temp.equals("int") && !temp.equals("date")) {                                                              //when it is char type.
                          String charTest = temp.split("char")[1];
                          if (Integer.parseInt(charTest.substring(1, charTest.length() - 1)) <= 0) {    //if char length is less than 0, return.
                            System.out.println("Char length should be over 0");
                            return;
                          }
                        }
                        if (tableElement.length == 3) {
                          temp += ",N,NP,NF,NR,RT,RB";          //nullable, isPrimaryKey, isForeignKey, isReferenced, refersTo, referedBy
                        }
                        else {
                          temp += ",Y,NP,NF,NR,RT,RB";
                        }
                        attributeMetaData.put(tableElement[0], temp);
                  }
                }
                else if (tableElement[0].equals("primary")) {           //primary key constraint.
                  primaryKeyDefCount++;
                  if (primaryKeyDefCount == 2) {                                        //when defined more than once, return.
                        System.out.println("Create table has failed: primary key definition is duplicated");
                        return;
                  }
                  for (int j = 1; j != tableElement.length; j++) {
                        if (!attributeList.contains(tableElement[j])) {         //when there is undefined column, return.
                          System.out.println("Create table has failed: \u005c'" + tableElement[j] + "\u005c' does not exist in column definition");
                          return;
                        }
                        else {
                          String oldMeta = attributeMetaData.get(tableElement[j]);
                          String[] oldMetaList = oldMeta.split(",");
                          String newMeta = oldMetaList[0] + ",N,P," + oldMetaList[3] + "," + oldMetaList[4] + "," + oldMetaList[5] + "," + oldMetaList[6];
                          attributeMetaData.put(tableElement[j], newMeta);      //update meta data.
                        }
                  }
                }
                else {                  //foreign key constraint.
                  String referenceTableName = "_";
                  ArrayList<String> referenceList = new ArrayList<String>();
                  HashMap<String, String> referenceMetaData = new HashMap<String, String>();
                  ArrayList<String> foreignKeyList = new ArrayList<String>();
                  boolean references = false;
                  for (int j = 1; j != tableElement.length; j++) {
                        if (tableElement[j].equals("references")) {             //when the program meets "references" keyword
                          references = true;
                          referenceTableName = tableElement[j + 1];
                          if (dbGet(referenceTableName) == null) {              //if reference table does not exist, return.
                            System.out.println("Create table has failed: foreign key references non existing table");
                            return;
                          }
                          j++;
                        }
                        else if (!references) {                         //before "references" keyword
                          if (!attributeList.contains(tableElement[j])) {               //when there is undefined column, return.
                            System.out.println("Create table has failed: \u005c'" + tableElement[j] + "\u005c' does not exist in column definition");
                            return;
                          }
                          else {
                            foreignKeyList.add(tableElement[j]);
                          }
                        }
                        else {          //after "references" keyword
                          String testQuery = referenceTableName + "/" + tableElement[j];
                          String testResult = dbGet(testQuery);
                          if (testResult == null) {                     //if reference table column does not exist, return.
                            System.out.println("Create table has failed: foreign key references non existing column");
                            return;
                          }
                          String[] testResultSlice = testResult.split(",");
                          if (testResultSlice[2].equals("NP")) {                //if reference column is not a primary key, return.
                            System.out.println("Create table has failed: foreign key references non primary key column");
                            return;
                          }
                          referenceList.add(tableElement[j]);
                          if (referenceTableAttributeList.contains(testQuery)) testResult = referenceTableAttributeMetaData.get(testQuery);             //when there is multiple foreign key constraint with same reference table column, the program must use modified meta data. 
                          referenceMetaData.put(tableElement[j], testResult);
                        }
                  }
                  if (foreignKeyList.size() != referenceList.size()) {          //if the number of column is different, return.
                    System.out.println("Create table has failed: foreign key references wrong type");
                    return;
                  }
                  for (int j = 0; j != foreignKeyList.size(); j++) {
                    String oldMeta = attributeMetaData.get(foreignKeyList.get(j));
                    String[] oldMetaList = oldMeta.split(",");
                    String refMeta = referenceMetaData.get(referenceList.get(j));
                    String[] refMetaList = refMeta.split(",");
                    if (!oldMetaList[0].equals(refMetaList[0])) {                       //if the column type is different, return.
                      System.out.println("Create table has failed: foreign key references wrong type");
                      return;
                    }
                    if (oldMetaList[3].equals("NF")) {
                      String newMeta = oldMetaList[0] + "," + oldMetaList[1] + "," +
                        oldMetaList[2] + ",F," + oldMetaList[4] + "," +
                        referenceTableName + "/" + referenceList.get(j) + "," +
                        oldMetaList[6];
                      attributeMetaData.put(foreignKeyList.get(j), newMeta);
                      String referedBy = refMetaList[6];
                      if (referedBy.equals("RB")) {
                        referedBy = tableName + "/" + foreignKeyList.get(j);
                      }
                      else {    //if referenced column is already referenced by other table columns, append it.
                        referedBy += "+" + tableName + "/" + foreignKeyList.get(j);
                      }
                      String newRefMeta = refMetaList[0] + "," + refMetaList[1] + "," +
                        refMetaList[2] + "," + refMetaList[3] + ",R," +
                        refMetaList[5] + "," + referedBy;
                      referenceMetaData.put(referenceList.get(j), newRefMeta);
                    }
                    else {                                                                                                                                                                      //if the column is already a foreign key,
                      String[] temp = oldMetaList[5].split("/");
                      if (!temp[0].equals(referenceTableName) || !temp[1].equals(referenceList.get(j))) {       //if constraint is different, return
                        System.out.println("Create table has failed: column constraint is duplicated");
                                return;
                      }
                    }
                  }
                  for (int j = 0; j != referenceList.size(); j++) {             //save the referenced column data to prepare actual database update.
                    String referenceTableAttribute = referenceTableName + "/" + referenceList.get(j);
                    if (!referenceTableAttributeList.contains(referenceTableAttribute)) referenceTableAttributeList.add(referenceTableAttribute);
                    referenceTableAttributeMetaData.put(referenceTableAttribute, referenceMetaData.get(referenceList.get(j)));
                  }
                }
          }
    }

        String attributeListString = attributeList.get(0);              //when code reaches this part, it can assure that all input date is correct. so, update database.
        for (int i = 1; i != attributeList.size(); i++) {
          attributeListString += "," + attributeList.get(i);
        }
        dbPut(tableName, attributeListString);

        for (int i = 0; i != attributeList.size(); i++) {
          String temp = attributeList.get(i);
          dbPut(tableName + "/" + temp, attributeMetaData.get(temp));
        }

        dbPut(tableName + "\u005c"\u005c"_head_", "_none_");              //record pointer

        if (referenceTableAttributeList.size() != 0) {
          for (int i = 0; i != referenceTableAttributeList.size(); i++) {
            String temp = referenceTableAttributeList.get(i);
            dbDelete(temp);
            dbPut(temp, referenceTableAttributeMetaData.get(temp));
          }
        }

        System.out.println("\u005c'" + tableName + "\u005c' table is created");   //success!
  }

  public static void dropTableHandler(String query)             //function for "drop table" query.
  {
    String attributes = dbGet(query);

    if (attributes == null) {                                   //if query does not exist in database, return.
      System.out.println("No such table");
      return;
    }

    String[] attributeList = attributes.split(",");

    for (int i = 0; i != attributeList.length; i++) {                                   //this 'for' loop checks whether the table is referenced or not.
      String attributeMetaData = dbGet(query + "/" + attributeList[i]);
      String[] attributeMetaDataList = attributeMetaData.split(",");
      if (attributeMetaDataList[4].equals("R")) {                                               //if referenced, return.
        System.out.println("Drop table has failed: \u005c'" + query + "\u005c' is referenced by other table");
        return;
      }
    }

    for (int i = 0; i != attributeList.length; i++) {
      String attributeMetaData = dbGet(query + "/" + attributeList[i]);
      String[] attributeMetaDataList = attributeMetaData.split(",");
      if (attributeMetaDataList[3].equals("F")) {       //this 'if' block updates tables that are referenced by the table to be deleted.
        String fk = attributeMetaDataList[5];
        String fkMetaData = dbGet(fk);
        String[] fkMetaDataList = fkMetaData.split(",");
        if (fkMetaDataList[6].indexOf('+') == -1) {
          String newfkMetaData = fkMetaDataList[0] + "," + fkMetaDataList[1] + "," +
            fkMetaDataList[2] + "," + fkMetaDataList[3] + ",NR," +
            fkMetaDataList[5] + ",RB";
          dbDelete(fk);
          dbPut(fk, newfkMetaData);
        }
        else {
          String[] referedByList = fkMetaDataList[6].split("\u005c\u005c+");
          String referedBy = "";
          for (int j = 0; j != referedByList.length; j++) {
            if (!referedByList[j].equals(query + "/" + attributeList[i])) {
              referedBy += referedByList[j] + "+";
            }
          }
          referedBy = referedBy.substring(0, referedBy.length() - 1);
          String newfkMetaData = fkMetaDataList[0] + "," + fkMetaDataList[1] + "," +
            fkMetaDataList[2] + "," + fkMetaDataList[3] + "," +
            fkMetaDataList[4] + "," + fkMetaDataList[5] + "," + referedBy;
          dbDelete(fk);
          dbPut(fk, newfkMetaData);
        }
      }
      dbDelete(query + "/" + attributeList[i]);         //delete column of table.
    }

    dbDelete(query);            //delete table.

    System.out.println("\u005c'" + query + "\u005c' table is dropped");           //success!
  }

  public static void descHandler(String query)          //function for "desc" query.
  {
    String attributes = dbGet(query);

    if (attributes == null) {                   //if query does not exist in database, return.
      System.out.println("No such table");
      return;
    }

        System.out.println("--------------------");
    System.out.println("table_name [" + query + "]");
    System.out.println("column_name\u005ct\u005cttype\u005ct\u005ctnull\u005ct\u005ctkey");

    String[] attributeList = attributes.split(",");

    for (int i = 0; i != attributeList.length; i++) {
      String attributeMetaData = dbGet(query + "/" + attributeList[i]);
      String[] attributeMetaDataList = attributeMetaData.split(",");
      String result = attributeList[i] + "\u005ct\u005ct" + attributeMetaDataList[0] + "\u005ct\u005ct" + attributeMetaDataList[1] + "\u005ct\u005ct";
      boolean isPrimary = attributeMetaDataList[2].equals("P");
      boolean isForeign = attributeMetaDataList[3].equals("F");
      if (isPrimary && isForeign) result += "PRI/FOR";
      else if (isPrimary) result += "PRI";
      else if (isForeign) result += "FOR";
      System.out.println(result);
      //System.out.println(attributeList[i] + ": " + attributeMetaData);	//if you want to see the form of meta data, use this line.
    }

    System.out.println("--------------------");
  }

  public static void showTablesHandler() {              //function for "show tables" query.
    Cursor cursor = myDatabase.openCursor(null, null);
    DatabaseEntry foundKey = new DatabaseEntry();
    DatabaseEntry foundData = new DatabaseEntry();

    ArrayList<String> tableList = new ArrayList<String>();

    if (cursor.getFirst(foundKey, foundData, LockMode.DEFAULT) != OperationStatus.SUCCESS) {    //when database is empty, return.
          System.out.println("There is no table");
      cursor.close();
      return;
    }

        try {
            do {
              String keyString = new String(foundKey.getData(), "UTF-8");
              String dataString = new String(foundData.getData(), "UTF-8");

              if (keyString.indexOf("/") == -1) {               //key for table name does not contain "/".
                tableList.add(keyString);
              }
            }
            while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
        }
        catch (UnsupportedEncodingException e) {
          cursor.close();
          e.printStackTrace();
        }

        if (tableList.size() == 0) {            //if there is no table, just return.
          System.out.println("There is no table");
        }
        else {
          System.out.println("--------------------");
          for (int i = 0; i != tableList.size(); i++) {
            System.out.println(tableList.get(i));
          }
          System.out.println("--------------------");
        }

        cursor.close();
    return;
  }

  public static void insertHandler(String query) {
    String[] querySlice = query.split("\u005c"\u005c"");

    String tableName = querySlice[0];
    if (dbGet(tableName) == null) {
      System.out.println("No such table");
      return;
    }
    ArrayList<ArrayList<String>> table = tableMaker(tableName);
    ArrayList<String> tableColumnList = table.get(0);
    ArrayList<String> tableColumnMetaDataList = table.get(1);

    String[] valueList = querySlice[querySlice.length - 1].split("\u005c"");
    if (valueList.length != tableColumnList.size()) {
      System.out.println("Insertion has failed: Types are not matched");
      return;
    }

    ArrayList<String> primaryKeyValueList = new ArrayList<String>();
    ArrayList<String> referenceTableNameList = new ArrayList<String>();
        HashMap<String, ArrayList<ArrayList<String>>> referenceTableList = new HashMap<String, ArrayList<ArrayList<String>>>();

    if (querySlice.length == 4) {
      String[] insertColumnList = querySlice[1].split(",");
      ArrayList<String> duplicateCheck = new ArrayList<String>();
      for (int i = 0; i != insertColumnList.length; i++) {
        if (!tableColumnList.contains(insertColumnList[i])) {
          System.out.println("Insertion has failed: \u005c'" + insertColumnList[i] + "\u005c' does not exist");
          return;
        }
        if (duplicateCheck.contains(insertColumnList[i])) {
          System.out.println("Insertion has failed: Column name duplication");          //if column name is duplicated, return
          return;
        }
        duplicateCheck.add(insertColumnList[i]);
      }
      if (tableColumnList.size() != insertColumnList.length) {
        System.out.println("Insertion has failed: Types are not matched");
        return;
      }
      ArrayList<String> correctOrder = new ArrayList<String>(Arrays.asList(valueList));
      for (int i = 0; i != insertColumnList.length; i++) {
        for (int j = 0; j != tableColumnList.size(); j++) {
          if (insertColumnList[i].equals(tableColumnList.get(j))) {
            valueList[j] = correctOrder.get(i);
          }
        }
      }
    }

    for (int i = 0; i != valueList.length; i++) {
      String[] metaDataList = tableColumnMetaDataList.get(i).split(",");
      if (isNull(valueList[i])) {
        if (metaDataList[1].equals("N")) {
          System.out.println("Insertion has failed: \u005c'" + tableColumnList.get(i) + "\u005c' is not nullable");
          return;
        }
      }
      else {
                  if (metaDataList[0].equals("int")) {
                    if (!isInt(valueList[i])) {
                      System.out.println("Insertion has failed: Types are not matched");
                      return;
                    }
                  }
                  else if (metaDataList[0].equals("date")) {
                    if (!isDate(valueList[i])) {
                      System.out.println("Insertion has failed: Types are not matched");
                      return;
                    }
                  }
                  else {
                    if (!isCharString(valueList[i])) {
                      System.out.println("Insertion has failed: Types are not matched");
                      return;
                    }
                    int charStringLimit = Integer.parseInt(metaDataList[0].substring(5, metaDataList[0].length() - 1));
                    if (valueList[i].length() - 2 > charStringLimit) {
                      String truncatedValue = valueList[i].substring(1, valueList[i].length() - 1);
                      truncatedValue = truncatedValue.substring(0, charStringLimit);
                      valueList[i] = "\u005c'" + truncatedValue + "\u005c'";
                    }
                  }
                  if (metaDataList[2].equals("P")) {
                    primaryKeyValueList.add(valueList[i]);
                  }
                  if (metaDataList[3].equals("F")) {
                    String[] referenceTo = metaDataList[5].split("/");
                    String referenceTableName = referenceTo[0];
                    String referenceColumnName = referenceTo[1];
                    if (!referenceTableNameList.contains(referenceTableName)) {
                      referenceTableNameList.add(referenceTableName);
                      referenceTableList.put(referenceTableName, tableMaker(referenceTableName));
                    }
                    ArrayList<Integer> fkConstraint = tableValueFinder(referenceTableList.get(referenceTableName), referenceColumnName, valueList[i]);
                    if (fkConstraint == null) {
                      System.out.println("Insertion has failed: Referential integrity violation");
                      return;
                    }
                  }
          }
    }

    //test
    //for (int i = 0; i != valueList.length; i++) System.out.println(valueList[i]);
        //test

    if (primaryKeyValueList.size() == 0) {                      //if there is no primary key constraints, combination of inserted values should be pk.
      for (int i = 0; i != valueList.length; i++) {
        primaryKeyValueList.add(valueList[i]);
      }
    }

    String primaryKeyValueString = primaryKeyValueList.get(0);
    for (int i = 1; i != primaryKeyValueList.size(); i++) {
      primaryKeyValueString += "\u005c"" + primaryKeyValueList.get(i);
    }

    if (dbGet(tableName + "\u005c"\u005c"" + primaryKeyValueString) != null) {
      System.out.println("Insertion has failed: Primary key duplication");
      return;
    }

    String valueString = valueList[0];
    for (int i = 1; i != valueList.length; i++) {
      valueString += "\u005c"" + valueList[i];
    }

    recordInsert(tableName, primaryKeyValueString, valueString);
    System.out.println("The row is inserted");
    return;
  }

  public static void deleteHandler(String query) {

    String tableName;
  }

  public static void deleteHandlerTesting(String query) {
    System.out.println(query);
    String[] whereClauseList = query.split("\u005c"\u005c"")[2].split("\u005c"");
    ArrayList<String> whereClausePostfixList = whereClauseToPostfix(whereClauseList);
    for (int i = 0; i != whereClausePostfixList.size(); i++) {
      System.out.print(whereClausePostfixList.get(i) + "/");
    }
    System.out.println(" ");
    String[] calTest = { "null", "'perry'", "=", "'1234'", "null", "=", "2015-01-01", "null", "is", "or", "and", "not" };
    ArrayList<String> calTest_ = new ArrayList<String>(Arrays.asList(calTest));
    System.out.println(postfixCalculator(calTest_));
    //recordInsert("test__", "6\"'Perry'", "6\"'Perry'\"2017-02-12");
    //recordDelete("test__", "2\"'Jim'");
    /*ArrayList<ArrayList<String>> test = tableMaker("testtest__reference");
    for (int i = 0; i != test.size(); i++) {
      ArrayList<String> row = test.get(i);
      for (int j = 0; j != row.size(); j++) {
        System.out.print(row.get(j) + "|");
      }
      System.out.println(" ");
    }*/
    /*ArrayList<Integer> test2 = tableValueFinder(test, "created_date", "2015-12-12");
    System.out.println(test2.size());
    System.out.println(test2.get(0));*/
        //System.out.println("'hello'".substring(1, 6));
        //System.out.println("2015-12-12".compareTo("2016-01-01"));
  }

  private static boolean isBoolean(String operand) {
    return (operand.equals("_true_") || operand.equals("_false_") || operand.equals("_unknown_"));
  }

  private static boolean isCharString(String operand) {
    return operand.contains("'");
  }

  private static boolean isDate(String operand) {
    return operand.contains("-");
  }

  private static boolean isInt(String operand) {
    if (isDate(operand)) return false;
    return Character.isDigit(operand.charAt(0));
  }

  private static boolean isNull(String operand) {
    if (isCharString(operand)) return false;
    return operand.contains("null");
  }

  private static int operatorOrder(String operator) {
    if (operator.equals("(") || operator.equals(")")) return 4;
    if (operator.equals("not")) return 2;
    if (operator.equals("and")) return 1;
    if (operator.equals("or")) return 0;
    return 3;
  }

  private static boolean isCompOperator(String operator) {
    for (int i = 0; i != COMP_OPERATOR.length; i++) {
      if (COMP_OPERATOR[i].equals(operator)) return true;
    }
    return false;
  }

  private static boolean isOperator(String operator) {
    for (int i = 0; i != OPERATOR.length; i++) {
      if (OPERATOR[i].equals(operator)) return true;
    }
    return false;
  }

  private static boolean isOperand(String operand) {
    return !isOperator(operand);
  }

  private static boolean isColumn(String operand) {
    if (isOperator(operand) || isBoolean(operand) || isCharString(operand) || isDate(operand) || isInt(operand) || isNull(operand)) return false;
    return true;
  }

  private static ArrayList<String> whereClauseToPostfix(String[] whereList) {
    ArrayList<String> result = new ArrayList<String>();
    ArrayList<String> stack = new ArrayList<String>();
    for (int i = 0; i != whereList.length; i++) {
      String op = whereList[i];
      if (isOperand(op)) result.add(op);
      else {
        if (stack.size() == 0 || stack.get(stack.size() - 1).equals("(")
          || (!op.equals(")") && operatorOrder(stack.get(stack.size() - 1)) < operatorOrder(op))) stack.add(op);
        else {
          if (op.equals(")")) {
            while (!stack.get(stack.size() - 1).equals("(")) {
              result.add(stack.get(stack.size() - 1));
              stack.remove(stack.size() - 1);
            }
            stack.remove(stack.size() - 1);
          }
          else {
            while (stack.size() > 0 && !stack.get(stack.size() - 1).equals("(") && operatorOrder(stack.get(stack.size() - 1)) >= operatorOrder(op)) {
              result.add(stack.get(stack.size() - 1));
              stack.remove(stack.size() - 1);
            }
            stack.add(op);
          }
        }
      }
    }
    while (stack.size() > 0) {
      result.add(stack.get(stack.size() - 1));
      stack.remove(stack.size() - 1);
    }
    return result;
  }

  private static boolean postfixCalculator(ArrayList<String> whereClausePostfixList) {
    ArrayList<String> operands = new ArrayList<String>();
    for (int i = 0; i != whereClausePostfixList.size(); i++) {
      String op = whereClausePostfixList.get(i);
      if (isOperator(op)) {
        String rightOperand = "";
        String leftOperand = "";
        switch (op) {
          case "<":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("null") || rightOperand.equals("null")) {
              operands.add("_unknown_");
              break;
            }
            if (isInt(leftOperand)) {
              if (Integer.parseInt(leftOperand) < Integer.parseInt(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isDate(leftOperand)) {
              if (leftOperand.compareTo(rightOperand) < 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isCharString(leftOperand)) {
              if (leftOperand.substring(1, leftOperand.length() - 1).compareTo(rightOperand.substring(1, rightOperand.length() - 1)) < 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            break;

          case ">":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("null") || rightOperand.equals("null")) {
              operands.add("_unknown_");
              break;
            }
            if (isInt(leftOperand)) {
              if (Integer.parseInt(leftOperand) > Integer.parseInt(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isDate(leftOperand)) {
              if (leftOperand.compareTo(rightOperand) > 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isCharString(leftOperand)) {
              if (leftOperand.substring(1, leftOperand.length() - 1).compareTo(rightOperand.substring(1, rightOperand.length() - 1)) > 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            break;

          case "=":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("null") || rightOperand.equals("null")) {
              operands.add("_unknown_");
              break;
            }
            if (isInt(leftOperand)) {
              if (Integer.parseInt(leftOperand) == Integer.parseInt(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isDate(leftOperand)) {
              if (leftOperand.equals(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isCharString(leftOperand)) {
              if (leftOperand.substring(1, leftOperand.length() - 1).equals(rightOperand.substring(1, rightOperand.length() - 1))) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            break;

          case "<=":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("null") || rightOperand.equals("null")) {
              operands.add("_unknown_");
              break;
            }
            if (isInt(leftOperand)) {
              if (Integer.parseInt(leftOperand) <= Integer.parseInt(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isDate(leftOperand)) {
              if (leftOperand.compareTo(rightOperand) <= 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isCharString(leftOperand)) {
              if (leftOperand.substring(1, leftOperand.length() - 1).compareTo(rightOperand.substring(1, rightOperand.length() - 1)) <= 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            break;

          case ">=":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("null") || rightOperand.equals("null")) {
              operands.add("_unknown_");
              break;
            }
            if (isInt(leftOperand)) {
              if (Integer.parseInt(leftOperand) >= Integer.parseInt(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isDate(leftOperand)) {
              if (leftOperand.compareTo(rightOperand) >= 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isCharString(leftOperand)) {
              if (leftOperand.substring(1, leftOperand.length() - 1).compareTo(rightOperand.substring(1, rightOperand.length() - 1)) >= 0) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            break;

          case "!=":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("null") || rightOperand.equals("null")) {
              operands.add("_unknown_");
              break;
            }
            if (isInt(leftOperand)) {
              if (Integer.parseInt(leftOperand) != Integer.parseInt(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isDate(leftOperand)) {
              if (!leftOperand.equals(rightOperand)) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            if (isCharString(leftOperand)) {
              if (!leftOperand.substring(1, leftOperand.length() - 1).equals(rightOperand.substring(1, rightOperand.length() - 1))) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            break;

          case "is":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (rightOperand.equals("null")) {
              if (leftOperand.equals("null")) {
                operands.add("_true_");
                break;
              }
              else {
                operands.add("_false_");
                break;
              }
            }
            else {
              if (leftOperand.equals("null")) {
                operands.add("_false_");
                break;
              }
              else {
                operands.add("_true_");
                break;
              }
            }

          case "not":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (rightOperand.equals("_true_")) {
              operands.add("_false_");
              break;
            }
            else if (rightOperand.equals("_false_")) {
              operands.add("_true_");
              break;
            }
            else {
              operands.add("_unknown_");
              break;
            }

          case "and":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("_false_") || rightOperand.equals("_false_")) {
              operands.add("_false_");
              break;
            }
            else if (leftOperand.equals("_unknown_") || rightOperand.equals("_unknown_")) {
              operands.add("_unknown_");
              break;
            }
            else {
              operands.add("_true_");
              break;
            }

          case "or":
            rightOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            leftOperand = operands.get(operands.size() - 1);
            operands.remove(operands.size() - 1);
            if (leftOperand.equals("_true_") || rightOperand.equals("_true_")) {
              operands.add("_true_");
              break;
            }
            else if (leftOperand.equals("_unknown_") || rightOperand.equals("_unknown_")) {
              operands.add("_unknown_");
              break;
            }
            else {
              operands.add("_false_");
              break;
            }

          default:
            System.out.println("Error");
            break;
        }
        //test
        System.out.println(leftOperand + " " + op + " " + rightOperand);
        System.out.println(operands.get(operands.size() - 1));
        System.out.println("--");
        //test
      }
      else {
        operands.add(op);
        //test
        System.out.println(op);
        System.out.println("--");
        //test
      }
    }
    if (operands.get(0).equals("_true_")) return true;
    return false;
  }

  private static ArrayList<ArrayList<String>> tableMaker(String tableName) {
    ArrayList<ArrayList<String>> resultTable = new ArrayList<ArrayList<String>>();
    ArrayList<String> attributeMetaDataList = new ArrayList<String>();
    String[] attributeList = dbGet(tableName).split(",");
    resultTable.add(new ArrayList<String>(Arrays.asList(attributeList)));
    for (int i = 0; i != attributeList.length; i++) {
      attributeMetaDataList.add(dbGet(tableName + "/" + attributeList[i]));
    }
    resultTable.add(attributeMetaDataList);
    String pointer = dbGet(tableName + "\u005c"\u005c"_head_");
    while (!pointer.equals("_none_")) {
      String[] recordNode = dbGet(pointer).split("\u005c"\u005c"\u005c"");
      String[] record = recordNode[1].split("\u005c"");
      ArrayList<String> recordTemp = new ArrayList<String>(Arrays.asList(record));
      recordTemp.add(pointer);
      resultTable.add(recordTemp);
      pointer = recordNode[2];
    }
    return resultTable;
  }

  private static ArrayList<Integer> tableValueFinder(ArrayList<ArrayList<String>> table, String column, String value) {
        if (table.size() == 2) return null;
    ArrayList<Integer> resultList = new ArrayList<Integer>();
    int columnIndex = -1;
    for (int i = 0; i != table.get(0).size(); i++) {
      if (table.get(0).get(i).equals(column)) columnIndex = i;
    }
    for (int i = 2; i != table.size(); i++) {
      if (table.get(i).get(columnIndex).equals(value)) {
        resultList.add(i);
      }
    }
    if (resultList.size() == 0) return null;
    resultList.add(columnIndex);
    return resultList;
  }

  private static void recordInsert(String tableName, String primaryKey, String value) {
    String pointer = dbGet(tableName + "\u005c"\u005c"_head_");
    if (pointer.equals("_none_")) {
      String headPointer = tableName + "\u005c"\u005c"" + primaryKey;
      dbUpdate(tableName + "\u005c"\u005c"_head_", headPointer);
      String recordNode = "_none_\u005c"\u005c"\u005c"" + value + "\u005c"\u005c"\u005c"_none_";
      dbPut(headPointer, recordNode);
      return;
    }
    else {
      String newHeadPointer = tableName + "\u005c"\u005c"" + primaryKey;
      String recordNode = "_none_\u005c"\u005c"\u005c"" + value + "\u005c"\u005c"\u005c"" + pointer;
      String[] originalHeadNode = dbGet(pointer).split("\u005c"\u005c"\u005c"");
      originalHeadNode[0] = newHeadPointer;
      String originalHeadNodeUpdate = originalHeadNode[0] + "\u005c"\u005c"\u005c"" + originalHeadNode[1] + "\u005c"\u005c"\u005c"" + originalHeadNode[2];
      dbUpdate(tableName + "\u005c"\u005c"_head_", newHeadPointer);
      dbPut(newHeadPointer, recordNode);
      dbUpdate(pointer, originalHeadNodeUpdate);
      return;
    }
  }

  private static void recordDelete(String tableName, String primaryKey) {
        String headPointer = dbGet(tableName + "\u005c"\u005c"_head_");
        String targetPointer = tableName + "\u005c"\u005c"" + primaryKey;
        String[] targetNode = dbGet(targetPointer).split("\u005c"\u005c"\u005c"");
        if (headPointer.equals(targetPointer)) {
          if (targetNode[2].equals("_none_")) {
            dbUpdate(tableName + "\u005c"\u005c"_head_", "_none_");
            dbDelete(targetPointer);
            return;
          }
          else {
            String newHeadPointer = targetNode[2];
            String[] newHeadNode = dbGet(newHeadPointer).split("\u005c"\u005c"\u005c"");
            newHeadNode[0] = "_none_";
            dbUpdate(tableName + "\u005c"\u005c"_head_", newHeadPointer);
            dbUpdate(newHeadPointer, newHeadNode[0] + "\u005c"\u005c"\u005c"" + newHeadNode[1] + "\u005c"\u005c"\u005c"" + newHeadNode[2]);
            dbDelete(targetPointer);
            return;
          }
        }
        else {
          if (targetNode[2].equals("_none_")) {
            String[] previousNode = dbGet(targetNode[0]).split("\u005c"\u005c"\u005c"");
            dbUpdate(targetNode[0], previousNode[0] + "\u005c"\u005c"\u005c"" + previousNode[1] + "\u005c"\u005c"\u005c"" + "_none_");
            dbDelete(targetPointer);
            return;
          }
          else {
            String[] previousNode = dbGet(targetNode[0]).split("\u005c"\u005c"\u005c"");
            String[] nextNode = dbGet(targetNode[2]).split("\u005c"\u005c"\u005c"");
            previousNode[2] = targetNode[2];
            nextNode[0] = targetNode[0];
            dbUpdate(targetNode[0], previousNode[0] + "\u005c"\u005c"\u005c"" + previousNode[1] + "\u005c"\u005c"\u005c"" + previousNode[2]);
            dbUpdate(targetNode[2], nextNode[0] + "\u005c"\u005c"\u005c"" + nextNode[1] + "\u005c"\u005c"\u005c"" + nextNode[2]);
            dbDelete(targetPointer);
            return;
          }
        }
  }

  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
    case DROP_TABLE:
    case DESC:
    case SHOW_TABLES:
    case SELECT:
    case INSERT_INTO:
    case DELETE_FROM:
      queryList();
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
      dbClose();
      System.exit(0);
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void queryList() throws ParseException {
  String q;
    label_1:
    while (true) {
      q = query();
      jj_consume_token(SEMICOLON);
      //printMessage(q);	//as mentioned above, printMessage function is used for exception part only.
      switch(Character.getNumericValue(q.charAt(0))) {
        case PRINT_CREATE_TABLE:
          createTableHandler(q.substring(1, q.length()));
          break;
        case PRINT_DROP_TABLE:
          dropTableHandler(q.substring(1, q.length()));
          break;
        case PRINT_DESC:
          descHandler(q.substring(1, q.length()));
          break;
        case PRINT_SHOW_TABLES:
          showTablesHandler();
          break;
        case PRINT_INSERT:
          insertHandler(q.substring(1, q.length()));
          break;
        case PRINT_DELETE:
          /*System.out.println(q.substring(1, q.length()));
          System.out.println("a\"b\"'c'\"\"d".split("\"\"")[1]);
          System.out.println("abc".contains("bc"));
          System.out.println(Character.isDigit("123".charAt(0)));*/
          deleteHandler(q.substring(1, q.length()));
          break;
      }
      System.out.print("DB_2015-16535> ");
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_TABLE:
      case DROP_TABLE:
      case DESC:
      case SHOW_TABLES:
      case SELECT:
      case INSERT_INTO:
      case DELETE_FROM:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

  static final public String query() throws ParseException {
  int q;                                        //integer for printMessage function
  String argument = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
      argument = createTableQuery();
              q = PRINT_CREATE_TABLE;
      break;
    case DROP_TABLE:
      argument = dropTableQuery();
              q = PRINT_DROP_TABLE;
      break;
    case DESC:
      argument = descQuery();
              q = PRINT_DESC;
      break;
    case SELECT:
      selectQuery();
              q = PRINT_SELECT;
      break;
    case INSERT_INTO:
      argument = insertQuery();
              q = PRINT_INSERT;
      break;
    case DELETE_FROM:
      argument = deleteQuery();
              q = PRINT_DELETE;
      break;
    case SHOW_TABLES:
      showTablesQuery();
              q = PRINT_SHOW_TABLES;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      argument = String.valueOf(q) + argument;
      {if (true) return argument;}
    throw new Error("Missing return statement in function");
  }

  static final public String createTableQuery() throws ParseException {
  String returnValue;
  String temp;
    jj_consume_token(CREATE_TABLE);
    returnValue = tableName();
    temp = tableElementList();
    returnValue += "/" + temp;
    //System.out.println(returnValue);		//if you want to see the argument form for create table, use this line.
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String tableElementList() throws ParseException {
  String returnValue;
  String temp;
    jj_consume_token(LEFT_PAREN);
    returnValue = tableElement();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      temp = tableElement();
      returnValue += "/" + temp;
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String tableElement() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      s = columnDefinition();
                           {if (true) return s;}
      break;
    case PRIMARY_KEY:
    case FOREIGN_KEY:
      s = tableConstraintDefinition();
                                    {if (true) return s;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String columnDefinition() throws ParseException {
  String returnValue;
  String temp;
    returnValue = columnName();
    temp = dataType();
    returnValue += "," + temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_NULL:
      jj_consume_token(NOT_NULL);
      returnValue += ",notnull";
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String tableConstraintDefinition() throws ParseException {
  String s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY_KEY:
      s = primaryKeyConstraint();
                               {if (true) return s;}
      break;
    case FOREIGN_KEY:
      s = referentialConstraint();
                                {if (true) return s;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String primaryKeyConstraint() throws ParseException {
  String returnValue;
  String temp;
    jj_consume_token(PRIMARY_KEY);
                    returnValue = "primary";
    temp = columnNameList();
    returnValue += "," + temp;
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String referentialConstraint() throws ParseException {
  String returnValue;
  String temp;
    jj_consume_token(FOREIGN_KEY);
                    returnValue = "foreign";
    temp = columnNameList();
    returnValue += "," + temp;
    jj_consume_token(REFERENCES);
                   returnValue += ",references";
    temp = tableName();
    returnValue += "," + temp;
    temp = columnNameList();
    returnValue += "," + temp;
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String columnNameList() throws ParseException {
  String s;
  String temp;
    jj_consume_token(LEFT_PAREN);
    s = columnName();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      temp = columnName();
          s += "," + temp;
    }
    jj_consume_token(RIGHT_PAREN);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String dataType() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
            {if (true) return "int";}
      break;
    case CHAR:
      jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      t = jj_consume_token(INT_VALUE);
      jj_consume_token(RIGHT_PAREN);
      {if (true) return "char(" + t.toString() + ")";}
      break;
    case DATE:
      jj_consume_token(DATE);
             {if (true) return "date";}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String tableName() throws ParseException {
  Token t;
    t = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return t.toString().toLowerCase();}
    throw new Error("Missing return statement in function");
  }

  static final public String columnName() throws ParseException {
  Token t;
    t = jj_consume_token(LEGAL_IDENTIFIER);
        {if (true) return t.toString().toLowerCase();}
    throw new Error("Missing return statement in function");
  }

  static final public String dropTableQuery() throws ParseException {
  String s;
    jj_consume_token(DROP_TABLE);
    s = tableName();
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String descQuery() throws ParseException {
  String returnValue;
    jj_consume_token(DESC);
    returnValue = tableName();
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public void showTablesQuery() throws ParseException {
    jj_consume_token(SHOW_TABLES);
  }

  static final public void selectQuery() throws ParseException {
    jj_consume_token(SELECT);
    selectList();
    tableExpression();
  }

  static final public void selectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASTERISK:
      jj_consume_token(ASTERISK);
      break;
    case LEGAL_IDENTIFIER:
      selectedColumn();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[9] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMMA);
        selectedColumn();
      }
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selectedColumn() throws ParseException {
    columnName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERIOD:
      jj_consume_token(PERIOD);
      tableName();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      columnName();
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void tableExpression() throws ParseException {
    fromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void fromClause() throws ParseException {
    jj_consume_token(FROM);
    tableReferenceList();
  }

  static final public void tableReferenceList() throws ParseException {
    referedTable();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      referedTable();
    }
  }

  static final public void referedTable() throws ParseException {
    tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      tableName();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
  }

  static final public String whereClause() throws ParseException {
  String returnValue;
    jj_consume_token(WHERE);
    returnValue = booleanValueExpression();
    {if (true) return "where\u005c"\u005c"" + returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String booleanValueExpression() throws ParseException {
  String returnValue;
  String temp;
    returnValue = booleanTerm();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_6;
      }
      jj_consume_token(OR);
      temp = booleanTerm();
      returnValue += "\u005c"or\u005c"" + temp;
    }
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String booleanTerm() throws ParseException {
  String returnValue;
  String temp;
    returnValue = booleanFactor();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(AND);
      temp = booleanFactor();
      returnValue += "\u005c"and\u005c"" + temp;
    }
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String booleanFactor() throws ParseException {
  String returnValue;
  boolean isNot = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      isNot = true;
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    returnValue = booleanTest();
    if (isNot) {if (true) return "not\u005c"" + returnValue;}
    else {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String booleanTest() throws ParseException {
  String returnValue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case LEGAL_IDENTIFIER:
    case DATE_VALUE:
    case CHAR_STRING:
      returnValue = predicate();
                              {if (true) return returnValue;}
      break;
    case LEFT_PAREN:
      returnValue = parenthesizedBooleanExpression();
                                                   {if (true) return returnValue;}
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String parenthesizedBooleanExpression() throws ParseException {
  String returnValue;
    jj_consume_token(LEFT_PAREN);
    returnValue = booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
    {if (true) return "(\u005c"" + returnValue + "\u005c")";}
    throw new Error("Missing return statement in function");
  }

  static final public String predicate() throws ParseException {
  String returnValue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:
      //if <PREDICATE> consists of <COMPARISON PREDICATE> and <NULL PREDICATE>
        returnValue = leftValuePredicate();
                                       {if (true) return returnValue;}
      break;
    case LEGAL_IDENTIFIER:
      returnValue = leftNonValuePredicate();
                                          {if (true) return returnValue;}
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String comparableValue() throws ParseException {
  Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
      t = jj_consume_token(INT_VALUE);
                      {if (true) return t.toString();}
      break;
    case CHAR_STRING:
      t = jj_consume_token(CHAR_STRING);
                        {if (true) return t.toString().toLowerCase();}
      break;
    case DATE_VALUE:
      t = jj_consume_token(DATE_VALUE);
                       {if (true) return t.toString();}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String leftValuePredicate() throws ParseException {
  String compVal;
  Token compOp;
  String rightOp;
    compVal = comparableValue();
    compOp = jj_consume_token(COMP_OP);
    rightOp = rightOperand();
    {if (true) return compVal + "\u005c"" + compOp.toString() + "\u005c"" + rightOp;}
    throw new Error("Missing return statement in function");
  }

  static final public String rightOperand() throws ParseException {
  String returnVal;
  String temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:
      returnVal = comparableValue();
                                  {if (true) return returnVal;}
      break;
    case LEGAL_IDENTIFIER:
      returnVal = columnName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PERIOD:
        jj_consume_token(PERIOD);
        temp = tableName();
        returnVal += "." + temp;
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    {if (true) return returnVal;}
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String leftNonValuePredicate() throws ParseException {
  String leftOp;
  String temp;
  Token compOp;
  String rightOp;
    leftOp = columnName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PERIOD:
      jj_consume_token(PERIOD);
      temp = tableName();
        leftOp += "." + temp;
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMP_OP:
      compOp = jj_consume_token(COMP_OP);
      rightOp = rightOperand();
        {if (true) return leftOp + "\u005c"" + compOp.toString() + "\u005c"" + rightOp;}
      break;
    case IS:
      rightOp = nullOperation();
    {if (true) return leftOp + "\u005c"" + rightOp;}
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String nullOperation() throws ParseException {
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
               {if (true) return "is\u005c"null";}
      break;
    case NOT_NULL:
      jj_consume_token(NOT_NULL);
                   {if (true) return "is\u005c"notnull";}
      break;
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(NULL);
               {if (true) return "is\u005c"notnull";}
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String insertQuery() throws ParseException {
  String returnValue;
  String temp;
    jj_consume_token(INSERT_INTO);
    returnValue = tableName();
    temp = insertColumnsAndSource();
    returnValue += "\u005c"\u005c"" + temp;
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String insertColumnsAndSource() throws ParseException {
  String returnValue = "";
  String temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      returnValue = columnNameList();
      returnValue += "\u005c"\u005c"";
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    temp = valueList();
    {if (true) return returnValue + temp;}
    throw new Error("Missing return statement in function");
  }

  static final public String valueList() throws ParseException {
  String returnValue = "values\u005c"\u005c"";
  String temp;
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    temp = value();
    returnValue += temp;
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      temp = value();
      returnValue += "\u005c"" + temp;
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static final public String value() throws ParseException {
  String returnValue;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
             {if (true) return "null";}
      break;
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:
      returnValue = comparableValue();
  {if (true) return returnValue;}
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public String deleteQuery() throws ParseException {
  String returnValue;
  String temp;
    jj_consume_token(DELETE_FROM);
    returnValue = tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      temp = whereClause();
      returnValue += "\u005c"\u005c"" + temp;
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    {if (true) return returnValue;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[31];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x28078440,0x28078400,0x28078400,0x0,0x3000,0x800,0x3000,0x0,0x380,0x0,0x0,0x0,0x80000,0x200000,0x0,0x80000,0x2000000,0x1000000,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x4800800,0x0,0x0,0x800000,0x200000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x1000,0x20000,0x0,0x0,0x1000,0x0,0x1000,0x120000,0x200000,0x0,0x0,0x1000,0x0,0x0,0x0,0x0,0x12024400,0x12024000,0x12004000,0x200000,0x12024000,0x200000,0x400000,0x0,0x400,0x1000,0x12004000,0x0,};
   }

  /** Constructor with InputStream. */
  public SimpleDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public SimpleDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public SimpleDBMSParser(SimpleDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(SimpleDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 31; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[61];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 31; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 61; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
