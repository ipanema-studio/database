/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParserTokenManager.java */
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.io.File;
import java.io.UnsupportedEncodingException;
import com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;

/** Token Manager. */
public class SimpleDBMSParserTokenManager implements SimpleDBMSParserConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffffffffc0L) != 0L)
         {
            jjmatchedKind = 49;
            return 27;
         }
         if ((active0 & 0x8000000000000L) != 0L)
            return 28;
         return -1;
      case 1:
         if ((active0 & 0x1fffdb7ffc0L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
            return 27;
         }
         if ((active0 & 0x2480000L) != 0L)
            return 27;
         return -1;
      case 2:
         if ((active0 & 0x8405000880L) != 0L)
            return 27;
         if ((active0 & 0x17bf8b7f740L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 2;
            }
            return 27;
         }
         return -1;
      case 3:
         if ((active0 & 0x163f8247400L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 3;
            }
            return 27;
         }
         if ((active0 & 0x9800938340L) != 0L)
            return 27;
         return -1;
      case 4:
         if ((active0 & 0x14378047400L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 4;
            }
            return 27;
         }
         if ((active0 & 0x2080200000L) != 0L)
            return 27;
         return -1;
      case 5:
         if ((active0 & 0x16078040400L) != 0L)
            return 27;
         if ((active0 & 0x300007000L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 5;
            }
            return 27;
         }
         return -1;
      case 6:
         if ((active0 & 0x4000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 6;
            }
            return 27;
         }
         if ((active0 & 0x300003000L) != 0L)
            return 27;
         return -1;
      case 7:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 7;
            return 27;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 8;
            return 27;
         }
         return -1;
      case 9:
         if ((active0 & 0x4000L) != 0L)
            return 27;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 3);
      case 10:
         return jjStopAtPos(0, 4);
      case 13:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 32:
         return jjStopAtPos(0, 1);
      case 39:
         return jjStartNfaWithStates_0(0, 51, 28);
      case 40:
         return jjStopAtPos(0, 42);
      case 41:
         return jjStopAtPos(0, 43);
      case 42:
         return jjStopAtPos(0, 52);
      case 44:
         return jjStopAtPos(0, 44);
      case 46:
         return jjStopAtPos(0, 53);
      case 59:
         return jjStopAtPos(0, 41);
      case 95:
         return jjStopAtPos(0, 45);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1080000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000500L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x10820018200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200102000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0xc008400080L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4800800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x2000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100001000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1000060000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x2080000000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2090000200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x10420054000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000220100L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0xc009000080L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x204002800L);
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 27);
         return jjMoveStringLiteralDfa2_0(active0, 0x940109400L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 27);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 27);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2080000000L);
      case 68:
      case 100:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 27);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40200400L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100001040L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10030840000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800128000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x200002000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008010000L);
      case 84:
      case 116:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 7;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000a00L);
      case 89:
      case 121:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000400L);
      case 67:
      case 99:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 27);
         break;
      case 69:
      case 101:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 9, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x14228046000L);
      case 76:
      case 108:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x2080000000L);
      case 77:
      case 109:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x100001000L);
      case 79:
      case 111:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 27);
         break;
      case 80:
      case 112:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 8, 27);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 84:
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 27);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 87:
      case 119:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x28000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100001000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 69:
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 27);
         else if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2010000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200002000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4008004000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10060000400L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 5;
         }
         else if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x20004400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200002000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100001000L);
      case 83:
      case 115:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 27);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 27);
         break;
      case 84:
      case 116:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 18, 27);
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x8028000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000400L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x28000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x6000L);
      case 89:
      case 121:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x3000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0x28000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L);
      case 76:
      case 108:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(7, 11);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x28000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x400L);
      case 69:
      case 101:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(9, 15);
         return jjMoveStringLiteralDfa10_0(active0, 0x23000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 83:
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(9, 14, 27);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x400L);
      case 77:
      case 109:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(10, 29);
         break;
      case 79:
      case 111:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(10, 27);
         break;
      case 83:
      case 115:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(10, 17);
         break;
      case 89:
      case 121:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(10, 12);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(10, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(11, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 39)
                  {
                     if (kind > 60)
                        kind = 60;
                  }
                  break;
               case 0:
                  if ((0xffffff7bffffffffL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  if ((0xfc00ff7bffffffffL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 46)
                        kind = 46;
                     jjCheckNAddStates(0, 3);
                  }
                  if ((0x7000000000000000L & l) != 0L)
                  {
                     if (kind > 54)
                        kind = 54;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 47)
                        kind = 47;
                     jjCheckNAdd(11);
                  }
                  else if (curChar == 33)
                     jjCheckNAdd(1);
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  else if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if (curChar == 61 && kind > 54)
                     kind = 54;
                  break;
               case 2:
                  if (curChar == 60)
                     jjCheckNAdd(1);
                  break;
               case 3:
                  if (curChar == 62)
                     jjCheckNAdd(1);
                  break;
               case 4:
                  if (curChar == 33)
                     jjCheckNAdd(1);
                  break;
               case 5:
                  if ((0xfc00ff7bffffffffL & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 6:
                  if ((0xffffff7bffffffffL & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 7:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xffffff7bffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 39 && kind > 60)
                     kind = 60;
                  break;
               case 10:
                  if ((0x280000000000L & l) == 0L)
                     break;
                  if (kind > 47)
                     kind = 47;
                  jjCheckNAdd(11);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAdd(11);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 46)
                     kind = 46;
                  jjCheckNAddStates(0, 3);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) != 0L && kind > 56)
                     kind = 56;
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 20:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 23:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L && kind > 57)
                     kind = 57;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
               case 8:
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 0:
                  if (kind > 59)
                     kind = 59;
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(27);
                  }
                  else if ((0xf8000001f8000001L & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  break;
               case 5:
                  if ((0xf8000001f8000001L & l) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 6:
                  if (kind > 59)
                     kind = 59;
                  break;
               case 26:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(27);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 28:
               case 8:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                  }
                  if ((jjbitVec0[i2] & l2) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                  }
                  break;
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 58)
                     kind = 58;
                  break;
               case 6:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 59)
                     kind = 59;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   11, 13, 16, 17, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\73", "\50", "\51", "\54", "\137", null, null, null, null, null, "\47", "\52", 
"\56", null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1fffffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[28];
static private final int[] jjstateSet = new int[56];
static protected char curChar;
/** Constructor. */
public SimpleDBMSParserTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public SimpleDBMSParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
